/*
 * -------------------------------------------------
 *  nf-core/qtlmap Nextflow base config file
 * -------------------------------------------------
 * A 'blank slate' config file, appropriate for general
 * use on most high performace compute environments.
 * Assumes that all software is installed and available
 * on the PATH. Runs in `local` mode - all jobs will be
 * run on the logged in environment.
 */

process {
  
  cpus = { check_max( 2 * task.attempt, 'cpus' ) }
  memory = { check_max( 8.GB * task.attempt, 'memory' ) }
  time = { check_max( 4.h * task.attempt, 'time' ) }

  maxRetries = 3
  maxErrors = '-1'

  // errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'terminate' }
  errorStrategy = 'retry' 
  
  // Process-specific resource requirements
  withName: extract_variant_info {    
    memory = { check_max( 1.GB * task.attempt, 'memory' ) }
    cpus = 1
    time = { check_max( 6.h * task.attempt, 'time' ) }
  }
  withName: prepare_molecular_traits {
    memory = { check_max( 20.GB * task.attempt, 'memory' ) }
    cpus = 1
  }
  withName: compress_bed {
    memory = 100.MB
    cpus = 1
  }
  withName: extract_samples_from_vcf {
    memory = { check_max( 1.GB * task.attempt, 'memory' ) }
    cpus = 1
    time = { check_max( 8.h * task.attempt, 'time' ) }
  }
  withName: make_pca_covariates {
    memory = { check_max( 12.GB * task.attempt, 'memory' ) }
    cpus = 4
  }
  withName: run_permutation {
    memory = { check_max( 5.GB * task.attempt, 'memory' ) }
    cpus = 1
    time = { check_max( 12.h * task.attempt, 'time' ) }
  }  
  withName: run_nominal {
    memory = { check_max( 5.GB * task.attempt, 'memory' ) }
    cpus = 1
    time = { check_max( 4.h * task.attempt, 'time' ) }
  }
  withName: merge_permutation_batches {
    memory = { check_max( 5.GB * task.attempt, 'memory' ) }
    cpus = 1
    time = { check_max( 12.h * task.attempt, 'time' ) }
  }
  
    withName: generate_sumstat_batches {
    memory = { check_max( 10.GB * task.attempt, 'memory' ) }
    cpus = { check_max( 2, 'cpus' ) }
    time = { check_max( 7.m * task.attempt, 'time' ) }
  }

   withName: concatenate_pq_files {
    memory = { check_max( 8.GB * task.attempt, 'memory' ) }
    cpus = { check_max( 2, 'cpus' ) }
    time = { check_max( 10.m * task.attempt, 'time' ) }
  }
   withName: concatenate_pqs_wo_sorting {
    memory = { check_max( 10.GB * task.attempt, 'memory' ) }
    cpus = { check_max( 4, 'cpus' ) }
    time = { check_max( 7.m * task.attempt, 'time' ) }
  }
   withName: sort_pq_file {
    memory = { check_max( 20.GB * task.attempt, 'memory' ) }
    cpus = { check_max( 4, 'cpus' ) }
    time = { check_max( 20.m * task.attempt, 'time' ) }
  }

  withName: convert_extracted_variant_info {
    memory = { check_max( 6.GB * task.attempt, 'memory' ) }
    cpus = { check_max( 2, 'cpus' ) }
    time = { check_max( 8.m * task.attempt, 'time' ) }
  }
  withName: convert_tmp {
    memory = { check_max( 200.MB * task.attempt, 'memory' ) }
    cpus = { check_max( 2, 'cpus' ) }
    time = { check_max( 7.m * task.attempt, 'time' ) }
  }
  withName: convert_pheno_meta {
    memory = { check_max( 200.MB * task.attempt, 'memory' ) }
    cpus = { check_max( 2, 'cpus' ) }
    time = { check_max( 7.m * task.attempt, 'time' ) }
  }
  withName: convert_merged_permutation_txt_to_pq {
    memory = { check_max( 200.MB * task.attempt, 'memory' ) }
    cpus = { check_max( 2, 'cpus' ) }
    time = { check_max( 7.m * task.attempt, 'time' ) }
  }
  withName: run_susie {
    memory = { check_max( 24.GB * task.attempt, 'memory' ) }
    cpus = { check_max( 2, 'cpus' ) }
    time = { check_max( 6.h * task.attempt, 'time' ) }
  }
  withName: merge_cs_sumstats {
    memory = { check_max( 10.GB * task.attempt, 'memory' ) }
    cpus = { check_max( 2, 'cpus' ) }
    time = { check_max( 7.m * task.attempt, 'time' ) }
  }  
  withName: extract_unique_molecular_trait_id {
    memory = { check_max( 10.GB * task.attempt, 'memory' ) }
    cpus = { check_max( 2, 'cpus' ) }
    time = { check_max( 15.m * task.attempt, 'time' ) }
  }
  withName: extract_lead_cc_signal {
    memory = { check_max( 10.GB * task.attempt, 'memory' ) }
    cpus = { check_max( 2, 'cpus' ) }
    time = { check_max( 15.m * task.attempt, 'time' ) }
  }
}

params {
  // Defaults only, expecting to be overwritten
  max_memory = 128.GB
  max_cpus = 16
  max_time = 120.h
}
